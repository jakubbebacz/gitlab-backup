// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(GitLabDbContext))]
    [Migration("20231015223009_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("Domain.Backup", b =>
                {
                    b.Property<Guid>("BackupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Visibility")
                        .HasColumnType("TEXT");

                    b.HasKey("BackupId");

                    b.ToTable("Backups");
                });

            modelBuilder.Entity("Domain.Label", b =>
                {
                    b.Property<Guid>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BackupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LabelId");

                    b.HasIndex("BackupId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Domain.Milestone", b =>
                {
                    b.Property<Guid>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BackupId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MilestoneDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("MilestoneTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("MilestoneId");

                    b.HasIndex("BackupId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("Domain.Label", b =>
                {
                    b.HasOne("Domain.Backup", "Backup")
                        .WithMany("Labels")
                        .HasForeignKey("BackupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Backup");
                });

            modelBuilder.Entity("Domain.Milestone", b =>
                {
                    b.HasOne("Domain.Backup", "Backup")
                        .WithMany("Milestones")
                        .HasForeignKey("BackupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Backup");
                });

            modelBuilder.Entity("Domain.Backup", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Milestones");
                });
#pragma warning restore 612, 618
        }
    }
}
